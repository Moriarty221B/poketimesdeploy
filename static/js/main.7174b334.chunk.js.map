{"version":3,"sources":["pokeball.png","components/Navbar.js","components/Home.js","components/About.js","hoc/Rainbow.js","components/Contact.js","components/Post.js","actions/postActions.js","App.js","serviceWorker.js","reducers/rootReducer.js","index.js"],"names":["module","exports","withRouter","props","className","to","Home","posts","this","postList","length","map","post","key","id","src","Pokeball","alt","title","body","Component","connect","state","Rainbow","WrappedComponent","Math","floor","random","Contact","Post","handleClick","deletePost","history","push","onClick","ownProps","match","params","post_id","find","dispatch","type","App","exact","path","component","About","Boolean","window","location","hostname","initState","rootReducer","action","newPosts","filter","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7174b334.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.f10bf078.png\";","import React from 'react'\r\nimport {Link, NavLink, withRouter} from 'react-router-dom'\r\n\r\nconst Navbar =(props)=>{\r\n    //setTimeout(()=>{\r\n      //  props.history.push('/about')\r\n    //}, 2000)\r\n    return(\r\n        <nav className=\"nav-wrapper pink darken-3\">\r\n            <div className=\"container\">\r\n                <a className=\"brand-logo\">Poke'Times </a>\r\n                <ul className=\"right\">\r\n                    <li><NavLink to=\"/\">Home</NavLink></li>\r\n                    <li><NavLink to=\"/about\">About</NavLink></li>\r\n                    <li><NavLink to=\"/contact\">Contact</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default withRouter(Navbar)","import React, {Component} from 'react'\r\nimport Pokeball from '../pokeball.png'\r\nimport {Link} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\n\r\nclass Home extends Component{\r\n   \r\n   render(){\r\n       const{posts}= this.props\r\n        const postList=posts.length?(\r\n            posts.map(post=>{\r\n                return(\r\n                    <div className=\"post card\" key={post.id}>\r\n                        <img src={Pokeball} alt=\"A pokeball\"/>\r\n                        <div className=\"card-content\">\r\n                            <Link to={'/'+post.id}>\r\n                            <span className=\"card-title pink-text\">{post.title}</span>\r\n                            </Link>\r\n                            <p>{post.body}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        ):(\r\n            <div className=\"center\">No Posts Yet</div>\r\n        )\r\n\r\n        return(\r\n            <div className=\"container home\">\r\n                <h4 className=\"center\">Home</h4>\r\n                {postList}\r\n            </div>\r\n        )\r\n   }    \r\n}   \r\n\r\nconst mapStateToProps=(state)=>{\r\n    return{\r\n        posts: state.posts\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Home)","import React from 'react'\r\nimport Rainbow from '../hoc/Rainbow'\r\n\r\nconst About =()=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">About</h4>\r\n            <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Exercitationem dolore ipsum dolorum autem quibusdam neque, architecto unde magni nesciunt illum itaque atque velit tenetur et asperiores at dicta error laborum!</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Rainbow(About)","import React from 'react'\r\n\r\nconst Rainbow = (WrappedComponent) =>{\r\n    const colours = ['red', 'pink', 'orange', 'blue', 'green', 'yellow'];\r\n    const randomColour= colours[Math.floor(Math.random()*5)];\r\n    const className = randomColour + '-text';\r\n\r\n    return(props)=>{\r\n        return(\r\n            <div className={className}>\r\n                <WrappedComponent{...props} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\nexport default Rainbow","import React from 'react'\r\n\r\nconst Contact =(props)=>{\r\n    //setTimeout(()=>{\r\n      //  props.history.push('about')\r\n   // }, 2000)\r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">Contact</h4>\r\n            <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Exercitationem dolore ipsum dolorum autem quibusdam neque, architecto unde magni nesciunt illum itaque atque velit tenetur et asperiores at dicta error laborum!</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Contact","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {deletePost} from '../actions/postActions'\r\nclass Post extends Component{\r\n    handleClick=()=>{\r\n        this.props.deletePost(this.props.post.id);\r\n        this.props.history.push('/');\r\n    }\r\n    \r\n    render(){\r\n        const post = this.props.post?(\r\n            <div className=\"post\">\r\n                <h4 className=\"center\">\r\n                    {this.props.post.title}\r\n                </h4>\r\n                <p>{this.props.post.body}</p>\r\n                <div className=\"center\">\r\n                    <button className=\"btn grey\" onClick={this.handleClick}>\r\n                        Delete Post</button>\r\n                </div>\r\n            </div>\r\n        ):(\r\n            <div className=\"center\">\r\n                Loading post....\r\n            </div>\r\n        )\r\n        return(\r\n            <div className=\"container\">\r\n                {post}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps=(state, ownProps)=>{\r\n    let id = ownProps.match.params.post_id\r\n    return{\r\n        post: state.posts.find(post=>post.id===id)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return{\r\n        deletePost: (id)=>{dispatch(deletePost(id))}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post)","export const deletePost=(id)=>{\r\n    return{\r\n        type:'DELETE_POST',\r\n        id\r\n    }\r\n}","import React, {Component} from 'react';\nimport Navbar from './components/Navbar'\nimport{BrowserRouter, Route, Switch} from 'react-router-dom'\nimport Home from './components/Home'\nimport About from './components/About'\nimport Contact from './components/Contact'\nimport Post from './components/Post'\n\nclass App extends Component{\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar/>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/about' component={About} />\n            <Route path='/contact' component={Contact} />\n            <Route path=\"/:post_id\" component={Post}/>\n          </Switch>       \n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    posts: [\r\n        {id: '1', title:'mazda', body:'vroom vroom vroom'},\r\n        {id: '2', title:'mercedes', body:'the best or nothing'},\r\n        {id: '3', title:'toyota', body:'moving forward'}\r\n    ]\r\n}\r\n\r\nconst rootReducer = (state=initState, action)=>{\r\n    if (action.type==='DELETE_POST'){\r\n        let newPosts= state.posts.filter(post=>{\r\n            return action.id !== post.id\r\n        });\r\n        return{\r\n            ...state,\r\n            posts:newPosts\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux'\nimport rootReducer from './reducers/rootReducer'\n\nconst store = createStore(rootReducer);\n\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}